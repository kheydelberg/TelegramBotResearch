import re
def validate_text(last_name):


  # Проверяем, является ли фамилия строкой и содержит ли хотя бы один символ
  if not isinstance(last_name, str) or not last_name:
    return False

  # Составляем регулярное выражение для валидации
  pattern = r"^[A-Za-zА-Яа-я]+$"

  # Проверяем фамилию на соответствие регулярному выражению.
  if not re.match(pattern, last_name):
    return False

  # Фамилия валидная
  return True




def is_russian_or_latin(letter):
    if not letter:
        return False

    # Проверка на принадлежность к русскому алфавиту
    if ord('А') <= ord(letter) <= ord('я'):
        return True

    # Проверка на принадлежность к латинскому алфавиту
    if ord('A') <= ord(letter) <= ord('Z') or ord('a') <= ord(letter) <= ord('z'):
        return True

    return False


def validate_authors(author):
    s = author.split(';')
    s= [x.strip() for x in s]
    print(s)
    for i in s:
        if i.count('.') > 2:
            return False
        elif i.count('.') == 2:
            if is_russian_or_latin(i[0]) and i[1] == '.' and is_russian_or_latin(i[2]) and i[3] == '.' and i[4]==" ":
                pass
            else:
                print('Errorrrrrrrrrrrrrrr',i)
                return False
            if not (validate_text(i[5:])):
                print('Error', i)
                return False

        elif i.count('.') == 1:
            if is_russian_or_latin(i[0]) and i[1] == '.' and  i[2]==" ":
                pass
            else:
                return False
            if not (validate_text(i[3:])):
                return False
        else:
            return False

    return True


def validate_category(category):
    cat= ['ТВиМС','Матан','ДУ','ЛинАл','Программирование','C++','C#','Python','АлГем','Java']
    if category in cat:
        return True
    return False




def validate_name(name):
    if is_russian_or_latin(name[0]):
        return True
    return False




def validate_link(url):
    """
    Проверка URL на корректность.
    """
    if not url:
        return False
    # Простая проверка на соответствие шаблону URL
    if not re.match(r'^(http|https)://.*$', url):
        return False
    return True


def validate_addition(lesson, discipline, author, link):
    pass
