import re

def validate_text(text):
    """
    Проверка текста на допустимые символы и длину.
    """
    if not text:
        return False
    # Проверка на допустимые символы (только буквы, цифры, пробелы и знаки препинания)
    if not re.match(r'^[\w\s.,!?-]+$', text):
        return False
    # Проверка длины текста (не более 100 символов)
    if len(text) > 100:
        return False
    return True

def is_russian_or_latin(letter):
    if not letter:
        return False

    # Проверка на принадлежность к русскому алфавиту
    if ord('А') <= ord(letter) <= ord('я'):
        return True

    # Проверка на принадлежность к латинскому алфавиту
    if ord('A') <= ord(letter) <= ord('Z') or ord('a') <= ord(letter) <= ord('z'):
        return True

    return False


def validate_authors(author):
    s=author.split(';')
    for i in s:
        if not(is_russian_or_latin(i[0]) and i[1]=='.'):
            return False
    return True



def validate_category(author):
    pass
def validate_name(author):
    pass
def validate_name(author):
    pass

def validate_link(url):
    """
    Проверка URL на корректность.
    """
    if not url:
        return False
    # Простая проверка на соответствие шаблону URL
    if not re.match(r'^(http|https)://.*$', url):
        return False
    return True

def validate_addition(lesson, discipline, author, link):
    """
    Проверка данных о предложении на добавление учебника/дисциплины/автора и ссылки на ресурс.
    """
    # Проверка каждого из полей
    if not validate_text(lesson):
        return False, "Недопустимое название учебника"
    if not validate_text(discipline):
        return False, "Недопустимое название дисциплины"
    if not validate_text(author):
        return False, "Недопустимое имя автора"
    if not validate_url(link):
        return False, "Некорректная ссылка на ресурс"
    return True, "Данные о предложении прошли валидацию"


