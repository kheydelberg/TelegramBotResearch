from core.handlers.basic import get_help
from core.keyboards.reply import create_pagination_keyboard, do_you_like, get_Math_Prog, get_category_of_math, get_category_of_prog
from aiogram.types import InlineKeyboardMarkup
import pytest


def test_get_Math_Prog():
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    result = get_Math_Prog()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Ä–∞–≤–µ–Ω None
    assert result is not None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º InlineKeyboardMarkup
    assert isinstance(result, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Ä–∞–≤–Ω–æ 1
    assert len(result.inline_keyboard) == 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ —Ä–∞–≤–Ω–æ 2
    assert len(result.inline_keyboard[0]) == 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã–µ
    assert result.inline_keyboard[0][0].text == '–í—ã—Å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'
    assert result.inline_keyboard[0][0].callback_data == 'math'
    assert result.inline_keyboard[0][1].text == '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'
    assert result.inline_keyboard[0][1].callback_data == 'prog'

    print("get_Math_Prog passed the test")


def test_get_category_of_math():
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    result = get_category_of_math()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Ä–∞–≤–µ–Ω None
    assert result is not None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º InlineKeyboardMarkup
    assert isinstance(result, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Ä–∞–≤–Ω–æ 1
    assert len(result.inline_keyboard) == 7

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ —Ä–∞–≤–Ω–æ 7
    assert len(result.inline_keyboard[0]) == 1
    assert len(result.inline_keyboard[1]) == 1
    assert len(result.inline_keyboard[2]) == 1
    assert len(result.inline_keyboard[3]) == 1
    assert len(result.inline_keyboard[4]) == 1
    assert len(result.inline_keyboard[5]) == 1
    assert len(result.inline_keyboard[6]) == 1


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã–µ
    assert result.inline_keyboard[0][0].text == '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑'
    assert result.inline_keyboard[0][0].callback_data == 'matan'
    assert result.inline_keyboard[1][0].text == '–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞'
    assert result.inline_keyboard[1][0].callback_data == 'linal'
    assert result.inline_keyboard[2][0].text == '–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'
    assert result.inline_keyboard[2][0].callback_data == 'discra'
    assert result.inline_keyboard[3][0].text == '–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏ —Ç–æ–ø–æ–ª–æ–≥–∏—è'
    assert result.inline_keyboard[3][0].callback_data == 'git'
    assert result.inline_keyboard[4][0].text == '–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è'
    assert result.inline_keyboard[4][0].callback_data == 'diffur'
    assert result.inline_keyboard[5][0].text == '–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –º–∞—Ç. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    assert result.inline_keyboard[5][0].callback_data == 'twims'
    assert result.inline_keyboard[6][0].text == '–ù–∞–∑–∞–¥'
    assert result.inline_keyboard[6][0].callback_data == 'back_math'

    print("get_category_of_math passed the test")


def test_get_category_of_prog():
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    result = get_category_of_prog()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Ä–∞–≤–µ–Ω None
    assert result is not None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º InlineKeyboardMarkup
    assert isinstance(result, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Ä–∞–≤–Ω–æ 2
    assert len(result.inline_keyboard) == 3

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ä–∞–≤–Ω–æ 2
    assert len(result.inline_keyboard[0]) == 2
    assert len(result.inline_keyboard[1]) == 2
    assert len(result.inline_keyboard[2]) == 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã–µ
    assert result.inline_keyboard[0][0].text == 'C++'
    assert result.inline_keyboard[0][0].callback_data == 'C++'
    assert result.inline_keyboard[0][1].text == 'C#'
    assert result.inline_keyboard[0][1].callback_data == 'C#'
    assert result.inline_keyboard[1][0].text == 'Python'
    assert result.inline_keyboard[1][0].callback_data == 'python'
    assert result.inline_keyboard[1][1].text == 'Java'
    assert result.inline_keyboard[1][1].callback_data == 'java'
    assert result.inline_keyboard[2][0].text == '–ù–∞–∑–∞–¥'
    assert result.inline_keyboard[2][0].callback_data == 'back_prog'

    print("get_category_of_prog passed the test")



def test_create_pagination_keyboard():
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    result = create_pagination_keyboard("prev", "1", "2", "3", "next")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Ä–∞–≤–µ–Ω None
    assert result is not None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º InlineKeyboardMarkup
    assert isinstance(result, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    assert len(result.inline_keyboard) == 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    assert len(result.inline_keyboard[0]) == 5

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã–µ
    assert result.inline_keyboard[0][0].text == 'prev'
    assert result.inline_keyboard[0][0].callback_data == 'prev'
    assert result.inline_keyboard[0][1].text == '1'
    assert result.inline_keyboard[0][1].callback_data == '1'
    assert result.inline_keyboard[0][2].text == '2'
    assert result.inline_keyboard[0][2].callback_data == '2'
    assert result.inline_keyboard[0][3].text == '3'
    assert result.inline_keyboard[0][3].callback_data == '3'
    assert result.inline_keyboard[0][4].text == 'next'
    assert result.inline_keyboard[0][4].callback_data == 'next'

    print("create_pagination_keyboard passed the test")



def test_do_you_like():
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    result = do_you_like()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Ä–∞–≤–µ–Ω None
    assert result is not None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º InlineKeyboardMarkup
    assert isinstance(result, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    assert len(result.inline_keyboard) == 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    assert len(result.inline_keyboard[0]) == 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã–µ
    assert result.inline_keyboard[0][0].text == '–î–∞üëå'
    assert result.inline_keyboard[0][0].callback_data == 'like'
    assert result.inline_keyboard[0][1].text == '–ù–µ—Çüòí'
    assert result.inline_keyboard[0][1].callback_data == 'not_like'

    print("do_you_like passed the test")


test_get_Math_Prog()
test_get_category_of_math()
test_get_category_of_prog()
test_create_pagination_keyboard()
test_create_pagination_keyboard()
test_do_you_like()
